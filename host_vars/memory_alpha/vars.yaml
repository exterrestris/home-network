---
ansible_host: 192.168.5.132
target_os: ubuntu

scans_user:
  username: scans
  password: "{{ vault_scans_user_password | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
  group: scans

scans_user_samba:
  name: Scans
  password: "{{ vault_scans_user_password }}"

appdata_path: /mnt/zfs/appdata

### mrlesmithjr.zfs
zfs_pools:
  - name: pool1
    action: 'create'
    compression: 'lz4'
    devices:
      - 'scsi-SATA_WDC_WD120EMAZ-11_8CKANMKF'
      - 'scsi-SATA_WDC_WD120EMAZ-11_8CKATPYE'
    type: 'mirror'
    state: 'present'
  - name: pool2
    action: 'create'
    compression: 'lz4'
    devices:
      - 'scsi-SATA_WDC_WD60EZRZ-00G_WD-WX41D95A2NJL'
      - 'scsi-SATA_WDC_WD60EZRZ-00R_WD-WX11DB56ZP10'
    type: 'mirror'
    state: 'present'

zfs_filesystems:
  - name: backups
    pool: pool1
    compression: lz4
    mountpoint: /mnt/zfs/backups
    state: present
  - name: backups/computers
    pool: pool1
    compression: lz4
    recordsize: 1M
    mountpoint: /mnt/zfs/backups/computers
    state: present
  - name: backups/drives
    pool: pool1
    compression: lz4
    recordsize: 1M
    mountpoint: /mnt/zfs/backups/drives
    state: present
  - name: backups/files
    pool: pool1
    compression: lz4
    recordsize: 1M
    mountpoint: /mnt/zfs/backups/files
    state: present
  - name: archive
    pool: pool1
    compression: lz4
    mountpoint: /mnt/zfs/archive
    state: present
  - name: resources
    pool: pool2
    compression: lz4
    mountpoint: /mnt/zfs/resources
    state: present
  - name: appdata
    pool: pool2
    compression: lz4
    mountpoint: "{{ appdata_path }}"
    state: present
  - name: photos
    pool: pool2
    compression: lz4
    mountpoint: "/mnt/zfs/photos"
    state: present

### exterrestris.sanoid
sanoid_datasets:
  - name: pool1/archive
    templates: local
  - name: pool1/backups
    templates: local
  - name: pool1/backups/computers
    templates: local
  - name: pool1/backups/files
    templates: ignore
  - name: pool1/backups/drives
    templates: local
  - name: pool2/appdata
    templates: frequent
  - name: pool2/resources
    templates: ignore
  - name: pool2/photos
    templates: local

syncoid_syncs:
  - src: pool1/archive
    dest: backup1/archive
    dest_host: "memory-beta.{{ internal_domain }}"
  - src: pool1/backups
    dest: backup1/backups/memory-alpha
    dest_host: "memory-beta.{{ internal_domain }}"
  - src: pool1/backups/computers
    dest: backup1/backups/memory-alpha/computers
    dest_host: "memory-beta.{{ internal_domain }}"
  - src: pool1/backups/drives
    dest: backup2/backups/memory-alpha/drives
    dest_host: "memory-beta.{{ internal_domain }}"
  - src: pool2/appdata
    dest: backup2/backups/memory-alpha/appdata
    dest_host: "memory-beta.{{ internal_domain }}"

### mount_disks
parity_disks:
  - path: /mnt/ext4/parity1
    diskbyid: /dev/disk/by-uuid/13a02c9d-1344-4523-9238-a6757142f6ae
    fs: ext4
    opts: defaults
    content: true

data_disks:
  - path: /mnt/ext4/data1
    data_path: /data
    diskbyid: /dev/disk/by-uuid/3eee8a73-449f-4680-ac95-a88226b27d79
    fs: ext4
    opts: defaults
    content: true
  - path: /mnt/ext4/data2
    data_path: /data
    diskbyid: /dev/disk/by-uuid/7f6e6993-8f06-4cf4-8f59-ec0ba5771bea
    fs: ext4
    opts: defaults
    content: true
  - path: /mnt/ext4/data3
    data_path: /data
    diskbyid: /dev/disk/by-uuid/f4ca6d24-5142-4583-adc4-ae791f25b4ca
    fs: ext4
    opts: defaults
    content: true
  - path: /mnt/ext4/data4
    data_path: /data
    diskbyid: /dev/disk/by-uuid/56eb9377-2ddc-4fc3-8409-d7549d4a0dab
    fs: ext4
    opts: defaults
    content: true
  - path: /mnt/ext4/data5
    data_path: /data
    diskbyid: /dev/disk/by-uuid/e0e41243-f51b-4730-a9c7-c001279a7315
    fs: ext4
    opts: defaults
    content: true

other_disks:
  - path: /mnt/ext4/transient1
    data_path: /data
    diskbyid: /dev/disk/by-uuid/cade8c26-973a-4ff1-9669-36fbcde5b97c
    fs: ext4
    opts: defaults
  - path: /mnt/ext4/transient2
    data_path: /data
    diskbyid: /dev/disk/by-uuid/d8fb93fb-4c74-4e21-b005-942d5cd89e58
    fs: ext4
    opts: defaults
  - path: /mnt/ext4/scratch1
    diskbyid: /dev/disk/by-uuid/fa7d3ad4-03bc-48f1-bb5b-253399a13202
    fs: ext4
    opts: defaults

ntfs_data_disks:

other_mounts:
  - path: /mnt/zfs

remove_mounts:

### sprat.ansible-role-mergerfs
mergerfs_mounts:
  - path: /mnt/storage
    branches:
      - /mnt/ext4/data*/data
    options: "{{ mergerfs_opts }},category.create={{ mergerfs_policy }},x-systemd.requires=/mnt/ext4/data1,x-systemd.requires=/mnt/ext4/data2,x-systemd.requires=/mnt/ext4/data3"
  - path: /mnt/transient
    branches:
      - /mnt/ext4/transient*/data
    options: "{{ mergerfs_opts }},category.create={{ mergerfs_policy }},x-systemd.requires=/mnt/ext4/transient1"

### bertvv.samba
samba_shares:
  - name: Archive
    path: /mnt/zfs/archive
    owner: "{{ main_user.username }}"
    group: archive
    directory_mode: '2775'
    writable: 'yes'
    guest_ok: 'yes'
  - name: Backups
    path: /mnt/zfs/backups
    owner: "{{ main_user.username }}"
    group: backups
    directory_mode: '2775'
    writable: 'yes'
    guest_ok: 'yes'
  - name: Photos
    path: /mnt/zfs/photos
    owner: "{{ main_user.username }}"
    group: photos
    directory_mode: '2775'
    writable: 'yes'
    guest_ok: 'yes'
  - name: Media
    path: /mnt/storage/media
    owner: "{{ main_user.username }}"
    group: media
    directory_mode: '2775'
    writable: 'yes'
    guest_ok: 'yes'
  - name: Jellyfin DVR
    path: /mnt/transient/dvr
    owner: "jellyfin"
    group: media
    directory_mode: '2775'
    writable: 'no'
    guest_ok: 'yes'
  - name: Resources
    path: /mnt/zfs/resources
    owner: "{{ main_user.username }}"
    group: resources
    create_mode: '775'
    directory_mode: '2775'
    writable: 'yes'
    guest_ok: 'yes'
  - name: Downloads
    path: /mnt/storage/downloads
    owner: "{{ main_user.username }}"
    group: downloads
    create_mode: '775'
    directory_mode: '2775'
    writable: 'yes'
    guest_ok: 'yes'
    browseable: 'yes'
  - name: Scans
    path: /mnt/transient/Scans
    owner: "{{ scans_user.username }}"
    group: "{{ scans_user.group }}"
    directory_mode: '2775'
    writable: 'yes'
    guest_ok: 'yes'
    browseable: 'yes'

### ironicbadger.ansible_role_snapraid
snapraid_email_address: "memory-alpha@{{ internal_domain }}"
snapraid_config_excludes:
  - /downloads/

## exterrestris.users
container_users:
  - username: jellyfin
    groups:
      - media
    uid: 200
    gid: 200
  - username: sonarr
    groups:
      - media
      - downloads
    uid: 201
    gid: 201    
  - username: radarr
    groups:
      - media
      - downloads
    uid: 202
    gid: 202
  - username: jackett
    groups:
      - downloads
    uid: 203
    gid: 203
  - username: torrents
    groups:
      - downloads
    uid: 204
    gid: 204
  - username: ombi
    groups:
      - downloads
    uid: 205
    gid: 205
  - username: metube
    groups:
      - downloads
    uid: 206
    gid: 206

### exterrestris.traefik
traefik_services:
  - "{{ cockpit_traefik_service }}"
  - name: jellyfin-svc
    type: http
    servers:
      - "http://jellyfin.{{ internal_domain }}:8096"

### weareinteractive.ufw
docker_ufw_rules:
  # Traefik proxy
  - rule: allow
    to_port: 8096
    proto: tcp
    interface_in: "{{ traefik_docker_network_bridge_name }}"
  # DLNA
  - rule: allow
    to_port: 1900
    proto: udp
  - rule: allow
    proto: igmp
  # Jellyfin Server Discovery
  - rule: allow
    to_port: 7359
    proto: udp
  # HDHomeRun
  - rule: allow
    from_ip: 192.168.5.162
    proto: udp

### exterrestris.docker_compose
docker_compose_projects:
  - project_dir: "{{ appdata_path }}/media"
    containers:
      - service_name: jellyfin
        image:
          name: linuxserver/jellyfin
          tag: bionic
        environment:
          - PUID={{ (container_users | selectattr('username', 'equalto', 'jellyfin') | list | first).uid }}
          - PGID={{ (nas_groups | selectattr('name', 'equalto', 'media') | list | first).gid }}
          - TZ=Europe/London
        volumes:
          - source: "{{ appdata_path }}/media/jellyfin"
            target: /config
            group: "jellyfin"
            owner: "jellyfin"
            mode: "755"
          - source: /mnt/storage/media/Shows
            target: /media/shows
            group: media
            mode: "g+rx"
          - source: /mnt/storage/media/Movies
            target: /media/movies
            group: media
            mode: "g+rx"
          - source: /mnt/storage/media/Music
            target: /media/music
            group: media
            mode: "g+rx"
          - source: /mnt/storage/media/Reactions
            target: /media/reactions
            group: media
            mode: "g+rx"
          - source: /mnt/transient/dvr
            target: /media/dvr
            group: media
            mode: "g+rwxs"
          - source: /mnt/ext4/scratch1/transcodes
            target: /config/data/transcodes
            owner: jellyfin
            group: jellyfin
            mode: "u+rwx"
        network_mode: "host"
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          ## Router
          - "traefik.http.routers.jellyfin.entryPoints=https"
          - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.{{ internal_domain }}`)" # OPTIONAL: && PathPrefix(`/jellyfin`)
          - "traefik.http.routers.jellyfin.tls=true"
          - "traefik.http.routers.jellyfin.middlewares=jellyfin-mw"
          - "traefik.http.routers.jellyfin.service=jellyfin-svc@file"
          ## Middleware
          - "traefik.http.middlewares.jellyfin-mw.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex"
          - "traefik.http.middlewares.jellyfin-mw.headers.frameDeny=true"
          - "traefik.http.middlewares.jellyfin-mw.headers.contentTypeNosniff=true"
          - "traefik.http.middlewares.jellyfin-mw.headers.browserXSSFilter=true"
          - "traefik.http.middlewares.jellyfin-mw.headers.customFrameOptionsValue='allow-from https://jellyfin.{{ internal_domain }}'"
          ## Service
          - "traefik.http.services.jellyfin-svc.loadBalancer.server.port=8096"
          - "traefik.http.services.jellyfin-svc.loadbalancer.server.scheme=http"
          - "traefik.http.services.jellyfin-svc.loadBalancer.passHostHeader=true"
    networks:
      - name: media
        external: true
        alias: "{{ traefik_docker_network }}"
  - project_dir: "{{ appdata_path }}/torrents"
    containers:
      - service_name: vpn
        image: qmcgaw/gluetun
        container_name: gluetun
        cap_add:
          - NET_ADMIN
        networks:
          - proxy
        expose:
          # qBittorrent WebUI
          - 8080 
        volumes:
          - gluetun:/gluetun
        environment:
          - VPNSP=surfshark
          - TZ=Europe/London
          - OPENVPN_USER={{ vault_surfshark_username }}
          - OPENVPN_PASSWORD={{ vault_surfshark_password }}
          - REGION=Netherlands Amsterdam
        restart: always
        labels:
          - "traefik.enable=true"
          ## Router
          - "traefik.http.routers.qbittorrent.entryPoints=https"
          - "traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.{{ ansible_hostname }}.{{ internal_domain }}`)"
          - "traefik.http.routers.qbittorrent.tls=true"
          ## Service
          - "traefik.http.services.qbittorrent-svc.loadBalancer.server.port=8080"
          - "traefik.http.services.qbittorrent-svc.loadbalancer.server.scheme=http"
          - "traefik.http.services.qbittorrent-svc.loadBalancer.passHostHeader=true"
      - service_name: qbittorrent
        image:
          name: ghcr.io/linuxserver/qbittorrent
          tag: version-14.3.9.99202110311443-7435-01519b5e7ubuntu20.04.1
        container_name: qbittorrent
        environment:
          - PUID={{ (container_users | selectattr('username', 'equalto', 'torrents') | list | first).uid }}
          - PGID={{ (nas_groups | selectattr('name', 'equalto', 'downloads') | list | first).gid }}
          - UMASK=002
          - TZ=Europe/London
          - WEBUI_PORT=8080
        volumes:
          - source: "qbittorrent"
            target: /config
            owner: "torrents"
            group: "torrents"
            mode: "755"
          - source: /mnt/storage/downloads/torrents
            target: /storage/downloads/torrents
            owner: "torrents"
            group: "downloads"
            mode: "g+rx"
        network_mode: "service:vpn"
        restart: unless-stopped
    networks:
      - name: proxy
        external: true
        alias: "{{ traefik_docker_network }}"
  - project_dir: "{{ appdata_path }}/media-downloads"
    containers:
      - service_name: sonarr
        image:
          name: linuxserver/sonarr
        environment:
          - PUID={{ (container_users | selectattr('username', 'equalto', 'sonarr') | list | first).uid }}
          - PGID={{ (nas_groups | selectattr('name', 'equalto', 'media') | list | first).gid }}
          - UMASK=002
          - TZ=Europe/London
        volumes:
          - source: sonarr
            target: /config
            group: sonarr
            owner: sonarr
            mode: "755"
          - source: /mnt/storage
            target: /storage
        expose:
          - 8989
        networks:
          - proxy
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          ## Router
          - "traefik.http.routers.sonarr.entryPoints=https"
          - "traefik.http.routers.sonarr.rule=Host(`sonarr.{{ internal_domain }}`)"
          - "traefik.http.routers.sonarr.tls=true"
          ## Service
          - "traefik.http.services.sonarr-svc.loadBalancer.server.port=8989"
          - "traefik.http.services.sonarr-svc.loadbalancer.server.scheme=http"
          - "traefik.http.services.sonarr-svc.loadBalancer.passHostHeader=true"
      - service_name: radarr
        image:
          name: linuxserver/radarr
        environment:
          - PUID={{ (container_users | selectattr('username', 'equalto', 'radarr') | list | first).uid }}
          - PGID={{ (nas_groups | selectattr('name', 'equalto', 'media') | list | first).gid }}
          - UMASK=002
          - TZ=Europe/London
        volumes:
          - source: radarr
            target: /config
            group: radarr
            owner: radarr
            mode: "755"
          - source: /mnt/storage
            target: /storage
        expose:
          - 7878
        networks:
          - proxy
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          ## Router
          - "traefik.http.routers.radarr.entryPoints=https"
          - "traefik.http.routers.radarr.rule=Host(`radarr.{{ internal_domain }}`)"
          - "traefik.http.routers.radarr.tls=true"
          ## Service
          - "traefik.http.services.radarr-svc.loadBalancer.server.port=7878"
          - "traefik.http.services.radarr-svc.loadbalancer.server.scheme=http"
          - "traefik.http.services.radarr-svc.loadBalancer.passHostHeader=true"
      - service_name: radarr-1080
        image:
          name: linuxserver/radarr
        environment:
          - PUID={{ (container_users | selectattr('username', 'equalto', 'radarr') | list | first).uid }}
          - PGID={{ (nas_groups | selectattr('name', 'equalto', 'media') | list | first).gid }}
          - UMASK=002
          - TZ=Europe/London
        volumes:
          - source: radarr-1080
            target: /config
            group: radarr
            owner: radarr
            mode: "755"
          - source: /mnt/storage
            target: /storage
        expose:
          - 7879
        networks:
          - proxy
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          ## Router
          - "traefik.http.routers.radarr-1080.entryPoints=https"
          - "traefik.http.routers.radarr-1080.rule=Host(`radarr.{{ ansible_hostname }}.{{ internal_domain }}`)"
          - "traefik.http.routers.radarr-1080.tls=true"
          ## Service
          - "traefik.http.services.radarr-1080-svc.loadBalancer.server.port=7879"
          - "traefik.http.services.radarr-1080-svc.loadbalancer.server.scheme=http"
          - "traefik.http.services.radarr-1080-svc.loadBalancer.passHostHeader=true"
      - service_name: jackett
        image:
          name: linuxserver/jackett
        environment:
          - PUID={{ (container_users | selectattr('username', 'equalto', 'jackett') | list | first).uid }}
          - PGID={{ (nas_groups | selectattr('name', 'equalto', 'media') | list | first).gid }}
          - UMASK=002
          - TZ=Europe/London
        volumes:
          - source: jackett
            target: /config
            group: jackett
            owner: jackett
            mode: "755"
        expose:
          - 9117
        networks:
          - proxy
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          ## Router
          - "traefik.http.routers.jackett.entryPoints=https"
          - "traefik.http.routers.jackett.rule=Host(`jackett.{{ ansible_hostname }}.{{ internal_domain }}`)"
          - "traefik.http.routers.jackett.tls=true"
          ## Service
          - "traefik.http.services.jackett-svc.loadBalancer.server.port=9117"
          - "traefik.http.services.jackett-svc.loadbalancer.server.scheme=http"
          - "traefik.http.services.jackett-svc.loadBalancer.passHostHeader=true"
      - service_name: ombi
        image:
          name: linuxserver/ombi
        environment:
          - PUID={{ (container_users | selectattr('username', 'equalto', 'ombi') | list | first).uid }}
          - PGID={{ (nas_groups | selectattr('name', 'equalto', 'media') | list | first).gid }}
          - UMASK=002
          - TZ=Europe/London
        volumes:
          - source: ombi
            target: /config
            group: ombi
            owner: ombi
            mode: "755"
        expose:
          - 3579
        networks:
          - proxy
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          ## Router
          - "traefik.http.routers.ombi.entryPoints=https"
          - "traefik.http.routers.ombi.rule=Host(`ombi.{{ internal_domain }}`)"
          - "traefik.http.routers.ombi.tls=true"
          ## Service
          - "traefik.http.services.ombi-svc.loadBalancer.server.port=3579"
          - "traefik.http.services.ombi-svc.loadbalancer.server.scheme=http"
          - "traefik.http.services.ombi-svc.loadBalancer.passHostHeader=true"
      - service_name: metube
        image:
          name: alexta69/metube
        environment:
          - YTDL_OPTIONS={"cookiefile":"/downloads/cookies.txt"}
          - STATE_DIR=/state
        volumes:
          - source: /mnt/storage/downloads/metube
            target: /downloads
            owner: metube
            group: downloads
            mode: "775"
          - source: metube
            target: /state
            owner: metube
            group: metube
            mode: "755"
        user: "{{ (container_users | selectattr('username', 'equalto', 'metube') | list | first).uid }}:{{ (nas_groups | selectattr('name', 'equalto', 'downloads') | list | first).gid }}"
        expose:
          - 8081
        networks:
          - proxy
        restart: unless-stopped
        labels:
          - "traefik.enable=true"
          ## Router
          - "traefik.http.routers.metube.entryPoints=https"
          - "traefik.http.routers.metube.rule=Host(`metube.{{ ansible_hostname }}.{{ internal_domain }}`)"
          - "traefik.http.routers.metube.tls=true"
          ## Service
          - "traefik.http.services.metube-svc.loadBalancer.server.port=8081"
          - "traefik.http.services.metube-svc.loadbalancer.server.scheme=http"
          - "traefik.http.services.metube-svc.loadBalancer.passHostHeader=true"  
    networks:
      - name: proxy
        external: true
        alias: "{{ traefik_docker_network }}"
