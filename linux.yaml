---
# Setup - Host Specific
- hosts: spacedock
  tasks:
    # Prevent kernel updates as patch required to support IOMMU
    - name: prevent automatic kernel updates
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - pve-kernel-5.4
        - pve-kernel-helper
        - pve-kernel-libc-dev
  tags:
    - kernel
    - setup

- hosts: memory_alpha
  roles:
    # Update kernel to HWE (5.8) to add support for Renesas USB controller
    - role: alvistack.kernel
      vars:
        kernel_release: "mainline"
  tags:
    - kernel
    - setup

# Main - Common
- hosts: all:!pfsense
  tasks:
    # Install packages
    - name: install common packages
      package:
        name: "{{ item.name }}"
        state: present
      with_items: "{{ common_packages }}"
      tags: packages

# Main - Standard Linux
- hosts: linux
  roles:
    # Install any available package updates
    - role: robertdebock.update
      vars:
        update_reboot: no
      tags:
        - updates
        - setup
    # Reboot if necessary
    - role: robertdebock.reboot
      tags:
        - updates
        - setup
    # Set up main user
    - role: exterrestris.ansible_users
      vars:
        users:
          - "{{ main_user }}"
      tags:
        - users
    # Install/configure ZSH
    - role: exterrestris.zsh
      vars:
        zsh_user: "{{ main_user.username }}"
      tags: zsh
    # Run ssh-agent automatically on login
    - role: ssh_agent
      vars:
        user: "{{ main_user.username }}"
        ssh_agent_source_files:
          - '.bashrc'
          - '.zshrc.local.pre-p10k'
        ssh_agent_keys:
          - ~/.ssh/id_ed25519
    # Install Cockpit UI
    - role: linux-system-roles.cockpit
      tags: cockpit
    # Configure firewall
    - role: weareinteractive.ufw
      vars:
        ufw_rules: "{{ common_ufw_rules }}"
      tags: firewall
  tasks:
    # Install ZSH Powerlevel10k config
    - name: copy p10k config
      copy:
        src: "p10k.zsh"
        dest: "/home/{{ main_user.username }}/.p10k.zsh"
        owner: "{{ main_user.username }}"
        group: "{{ main_user.username }}"
        mode: '0644'
      tags: zsh

# Main - Groups
- hosts: proxmox_host
  roles:
    # Remove Proxmox 'unregisted' nag
    - role: ironicbadger.ansible_role_proxmox_nag_removal
    # Disable cluster services to prevent SSD wear
    - role: proxmox_host
      tags: proxmox
    # Install SSL certificate
    - role: exterrestris.proxmox_ssl
      tags: ssl
      
- hosts: proxmox_vm
  roles:
    # Install qemu-guest-agent
    - role: proxmox_vm

- hosts: zfs
  roles:
    # Install/configure ZFS pools
    - role: mrlesmithjr.zfs
      tags:
        - disks
        - zfs
    # Install/configure ZFS snapshots/replication using Sanoid
    - role: exterrestris.sanoid
      tags: sanoid
    # Install Cockpit ZFS Manager
    - role: cockpit_zfs
      tags: cockpit

- hosts: nas
  roles:
    # Set up groups needed for file permissions
    - role: exterrestris.ansible_users
      vars:
        groups_to_create: "{{ nas_groups }}"
      tags:
        - users
    # Mount ext4 disks
    - role: mount_disks
    # Install/configure mergerfs
    - role: sprat.ansible_role_mergerfs
      tags:
        - disks
        - mergerfs
    # Install/configure Samba shares/users
    - role: bertvv.samba
      vars:
        samba_users:
          - "{{ main_user_samba }}"
      tags:
        - samba
    # Install Docker (needed by ironicbadger.ansible_role_snapraid)
    - role: geerlingguy.docker
      tags:
        - docker
    # Build and configure snapraid
    - role: ironicbadger.ansible_role_snapraid
      tags:
        - snapraid
    # Configure firewall
    - role: weareinteractive.ufw
      vars:
        ufw_rules: "{{ nas_ufw_rules }}"
      tags: firewall
    # Set up WSDD for network discovery
    - role: exterrestris.wsdd
      tags:
        - wsdd
        - samba
  tasks:
    # Add main user to groups created
    - name: additional groups for main user
      user:
        name: "{{ main_user.username }}"
        groups: "{{ nas_groups | map(attribute='name') }}"
        append: yes
      tags:
        - users

- hosts: traefik:!docker
  roles:
    # Install Traefik
    - role: exterrestris.traefik
    # Configure firewall
    - role: weareinteractive.ufw
      vars:
        ufw_rules: "{{ traefik_ufw_rules }}"
      tags:
        - firewall
        - traefik-firewall
    # Install SSL certificate
    - role: exterrestris.fetch_ssl
      tags:
        - traefik-ssl
  tasks:
    - name: configure Cockpit to allow proxying
      template:
        src: cockpit.conf.j2
        dest: "/etc/cockpit/cockpit.conf"
      vars:
        domain: "cockpit.{{ ansible_hostname }}.{{ internal_domain }}"
      when: "'traefik' in group_names"
      tags:
        - traefik
  tags:
    - traefik

- hosts: docker
  roles:
    # Install Docker
    - role: geerlingguy.docker
    # Install PIP
    - role: geerlingguy.pip
      vars:
        pip_install_packages:
          - name: docker
          - name: docker-compose
    # Set up users specific to containers
    - role: exterrestris.ansible_users
      vars:
        users: "{{ container_users | map('combine', container_user_opts) }}"
      tags:
        - container-users    
    # Install Traefik
    - role: exterrestris.traefik
      tags:
        - traefik
      when: "'traefik' in group_names"
    # Configure firewall
    - role: weareinteractive.ufw
      vars:
        ufw_rules: "{{ docker_ufw_rules }}"
      tags:
        - firewall
        - docker-firewall
    # Install SSL certificate
    - role: exterrestris.fetch_ssl
      tags:
        - traefik
        - traefik-ssl
      when: "'traefik' in group_names"
    # Generate Docker Compose
    - role: exterrestris.docker_compose
      tags:
        - docker-compose
  tasks:
    - name: configure Cockpit to allow proxying
      template:
        src: cockpit.conf.j2
        dest: "/etc/cockpit/cockpit.conf"
      vars:
        domain: "cockpit.{{ ansible_hostname }}.{{ internal_domain }}"
      when: "'traefik' in group_names"
      tags:
        - traefik
  tags:
    - docker

# Main - Host Specific
- hosts: memory_alpha
  roles:
    # Create 'Scans' user
    - role: exterrestris.ansible_users
      vars:
        users:
          - "{{ scans_user }}"
        groups_to_create:
          - name: "{{ scans_user.group }}"
      tags:
        - users
    # Set up Samba user for 'Scans'
    - role: bertvv.samba
      vars:
        samba_users:
          - "{{ scans_user_samba }}"
      tags: samba
  tasks:
    # Add 'Scans' role to main user
    - name: additional groups for main user
      user:
        name: "{{ main_user.username }}"
        groups: "{{ scans_user.group }}"
        append: yes
      tags:
        - users
